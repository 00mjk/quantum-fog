#pragma once#include "C_AMP_GEN.h"#include "POL_ROTATOR.h"#include "POLARIZER.h"class QB_NET;class C_PI_WIND;enum PHASOR_ANALYZER { k_pol, k_pol_rot};//******************************************class  C_PHASOR_YZER_AMP_GEN: public C_AMP_GEN{private:	PHASOR_ANALYZER 	its_type;	DOUBLE				its_theta;//angle in degrees between pol axis and x axis 	USHORT				its_max_m_sum; //m_sum = mx + mypublic:	C_PHASOR_YZER_AMP_GEN(PHASOR_ANALYZER type,	NODE * nd_p, QB_NET * net_p, C_PI_WIND * pi_wind_p);	const DOUBLE  &  	get_theta() const;	VOID   				set_theta(const DOUBLE  &  theta);	USHORT		get_expected_degen(const USHORT * mx_p, const USHORT  * my_p);		BOOLEAN		parents_are_canonical();	BOOLEAN		dialog_entries_are_legal(Str255  theta);	VOID		fill_trans_mat_and_st_names_of_nd();	BOOLEAN		talk();};#pragma mark -//******************************************inlineconst DOUBLE  &		C_PHASOR_YZER_AMP_GEN::get_theta() const{	return its_theta;}