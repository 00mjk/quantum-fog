#pragma once#include "QFog_constants.h"#ifdef   _mac_gui_app //''''''''''''''''''''''''''''''''''''''''''''\\.	class C_MAIN_VIEW;	#include "C_PORT_RELATED.h"	#include "C_COLORS.h"	#include "C_ARROW_DRAWER.h"	#include "UI_MAP.h"	#include "TWO_MODE_FUN.h"	class QB_NET;	class C_PI_WIND;	class C_BEAM_SPL_AMP_GEN;#endif //_mac_gui_app \\............................................//#include "NODE.h"//******************************************class BEAM_SPL : public NODE{private:public:		BEAM_SPL();	virtual 	~BEAM_SPL();#ifdef   _mac_gui_app //''''''''''''''''''''''''''''''''''''''''''''\\.private:	enum {the_rot_ang=15, port_docking_rad = 0, port_greeting_rad = 5 };	SInt16  its_icon_dir;	//its_icon_dir measures in degrees	//the amount of clockwise rotation of the icon// 	Let nw=northwest, etc. The beam splitter icon before//  being rotated has two destination-only ports at nw and ne,//  and two source-only ports at se and sw. We will identify //  nw=0 and ne=1 (destination ports)//  se=2 and sw=3 (source ports):	Point  	its_port_locs_p[4]; 	// max_load=1 for all ports	SInt16	its_port_guests_p[4];// the nd_id of guest or negative number if no guest 	public:	STRINGY 		get_class_str();	ND_CLASS_ID		get_class_id();	VOID 		init_port_locs();	BEAM_SPL(const Point  &  m_down_pt);	USHORT		get_port_guest(USHORT sub_nd_id);	C_CIRCLE   	get_docking_cir(USHORT sub_nd_id);		BOOLEAN   	pt_is_in_greeting_cir_of_avail_d_port(		const Point  &  pt, 		USHORT  &  sub_nd_id);	BOOLEAN   	pt_is_in_greeting_cir_of_avail_s_port(		const Point  &  pt, 		USHORT  &  	sub_nd_id);	VOID  		add_nd_to_port_glist(USHORT g_nd_id, USHORT sub_nd_id);	VOID  		remove_nd_from_all_port_glists(USHORT g_nd_id);	VOID		renumber_nds_of_port_glists(const UI_MAP  &	map);		VOID  	draw();		VOID  	move_by( const Point  &  delta);	//	VOID   		rotate_rim_pt(Point  &  pt, SInt16 ang); //ang in degrees	VOID		refresh_port_locs();	VOID		rotate();	BOOLEAN 	has_icon_dir();	SInt16 		get_icon_dir() const;	VOID 		set_icon_dir(SInt16 icon_dir);		VOID	call_amp_gen(QB_NET *  net_p, C_PI_WIND * pi_wind_p);	VOID	obey_amp_gen(USHORT mx_n_sum, const TWO_MODE_FUN  & two_fun, const USHORT * m1x_p,const USHORT * m2x_p,const USHORT * m1y_p,const USHORT * m2y_p);#endif //_mac_gui_app \\............................................//};#pragma mark -#ifdef   _mac_gui_app //''''''''''''''''''''''''''''''''''''''''''''\\.//******************************************inlineSTRINGY  BEAM_SPL::get_class_str(){	return  "BEAM_SPL";}//******************************************inlineND_CLASS_ID	 BEAM_SPL::get_class_id(){	return BEAM_SPL_id;}//******************************************inlineUSHORT	BEAM_SPL::get_port_guest(USHORT		sub_nd_id)	//in{	return its_port_guests_p[sub_nd_id];}//******************************************inlineC_CIRCLE   BEAM_SPL::get_docking_cir(USHORT 	sub_nd_id)		//in{	return C_CIRCLE(its_port_locs_p[sub_nd_id], port_docking_rad);}//******************************************inlineVOID  BEAM_SPL::add_nd_to_port_glist(USHORT		g_nd_id,	//inUSHORT		sub_nd_id)	//in{	its_port_guests_p[sub_nd_id]= g_nd_id;}//******************************************inlineBOOLEAN 	BEAM_SPL::has_icon_dir(){	return true;}//******************************************inlineSInt16 	BEAM_SPL::get_icon_dir()	const{	return its_icon_dir;}#endif //_mac_gui_app \\............................................//