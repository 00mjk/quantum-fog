#pragma once#include "QFog_constants.h"#include "QB_NET.h"#include "C_PI_ND_EFIELD.h"#include "C_PI_ND_POPUP.h"#include "C_PI_PARENTS_TABLE.h"#include "C_PI_AMPS_TABLE.h"#include "BEAM_SPL.h"#include "C_HOST_VIEW.h"#include "UModalDialogsPlus.h"#include "QBIT_ROT.h"#include "C_TOP_PTRS.h"//PI_WIND = Prior Information Window//******************************************class	C_PI_WIND : public LWindow, public LListener, public C_TOP_PTRS {protected:	USHORT					its_nd;	TM_COL_NUM				its_in_st; //in_st = in state = parents' state	COORD_SYSTEM			its_coord_sys; //COORD_SYS defined in "QFog_constants.h"	LCaption  * 		its_owner_cap_p;	C_PI_ND_EFIELD  *	its_nd_efield_p;	C_PI_ND_POPUP  *	its_nd_popup_p;		LStdButton  *		its_first_nd_but_p;	LStdButton  *		its_next_nd_but_p;	//in_st = incomming state = parent state	LStdButton  *		its_first_in_st_but_p;	LStdButton  *		its_prev_in_st_but_p;	LStdButton  *		its_next_in_st_but_p;		C_PI_PARENTS_TABLE  *	its_parents_table_p;			LStdButton  *		its_all_act_but_p;	LStdButton  *		its_none_act_but_p;		LStdRadioButton  *	its_polar_radio_p;	LStdRadioButton  *	its_rect_radio_p;		LCaption  *			its_rad_re_cap_p;	LCaption  *			its_ang_im_cap_p;		C_PI_AMPS_TABLE  *	its_amps_table_p;		LCaption  *			its_num_of_rows_cap_p;	LStdButton  *		its_num_of_rows_but_p;	LStdButton  *		its_total_prob_but_p;	LCaption  *			its_total_prob_cap_p;	ST_NAMES_GENERATOR_DATA		its_st_names_gen_data;	LStdButton  *				its_gen_amps_but_p;	public:		C_PI_WIND(LStream  * inStream);	C_PI_WIND();	virtual   ~C_PI_WIND();	VOID 	show_owner( const LStr255  &  file_name);	VOID 	special_finish_create(const LStr255  & file_name, USHORT sel_nd);	BOOLEAN  	save_pi();			VOID 		AttemptClose();	VOID 		DoClose();		USHORT  get_nd();		VOID 	set_nd_always(USHORT  new_nd);	VOID	set_nd_always();	VOID 	set_nd_if_diff(USHORT  new_nd);	VOID	set_in_st(TM_COL_NUM  new_in_st); 	VOID	set_in_st_if_diff(TM_COL_NUM  new_in_st);		VOID	toggle_coord_sys();			VOID 	refresh_total_prob_cap();	VOID 	clear_total_prob_cap();			VOID 		refresh_num_of_rows_cap();	BOOLEAN 	handle_num_of_rows_dialog();	BOOLEAN		gen_st_names_dialog_entries_are_legal(ST_NAMES_GENERATOR_DATA  &	 v);	BOOLEAN		handle_gen_st_names_dialog();	BOOLEAN		handle_reorder_nds_dialog();	BOOLEAN		handle_reorder_in_nds_dialog();	BOOLEAN		handle_reorder_nd_sts_dialog();	BOOLEAN		focus_nd_has_this_many_parents(USHORT	num);	BOOLEAN		focus_nd_parents_are_binary();			VOID 		ListenToMessage(MessageT  inMessage, VOID  * ioParam );	VOID 		Click(SMouseDownEvent	& inMouseDown);	VOID 		ClickSelf(const SMouseDownEvent	& inMouseDown);		VOID 		rename_a_nd(USHORT nd, Str255 new_name_pstr);	virtual BOOLEAN  	HandleKeyPress(const EventRecord  & in_key_event);	virtual BOOLEAN 	ObeyCommand(CommandT inCommand, VOID * ioParam);	virtual VOID		FindCommandStatus(CommandT inCommand,							BOOLEAN & outEnabled, BOOLEAN & outUsesMark,							UInt16 & outMark, Str255 outName_pstr);		};#pragma mark -//******************************************inlineBOOLEAN		C_PI_WIND::save_pi(){	return its_amps_table_p->unload_editor();		}//******************************************inlineUSHORT  C_PI_WIND::get_nd(){	return its_nd;}//******************************************inlineVOID	C_PI_WIND::set_nd_always(){	set_nd_always(its_nd);}	//******************************************inlineVOID	C_PI_WIND::set_nd_if_diff(USHORT  new_nd) 	//in{	if(its_nd!=new_nd) set_nd_always(new_nd);}//******************************************inlineVOID	C_PI_WIND::set_in_st_if_diff(TM_COL_NUM  new_in_st)	//in {	if(its_in_st!=new_in_st) set_in_st(new_in_st);}//******************************************inlineVOID 	C_PI_WIND::clear_total_prob_cap(){	its_total_prob_cap_p->SetDescriptor("\p");}