#include "C_PI_AMPS_TABLE.h"#include "QB_NET.h"#include "EXCEPTIONS.h"#include "C_ETABLE_MULTI_SEL.h"#include "StCPTstate.h"#pragma mark --creation/destruction--//******************************************C_PI_AMPS_TABLE::C_PI_AMPS_TABLE(LStream	 *	inStream) 		//in	:C_EDIT_TABLE(inStream),	its_coord_sys(rect_cs){	LTableMultiGeometry  * 	geo_p		= new LTableMultiGeometry(this, 70 /* cell width */, 20/*cell height*/);	//delete:	in ~LTableView().	ThrowIfNil_(geo_p);	SetTableGeometry(geo_p);		C_ETABLE_MULTI_SEL  * 	sel_p = new C_ETABLE_MULTI_SEL(this, 2/*1st selectable col*/, 1/*1st selectable row*/);	//delete:	in ~LTableView().	ThrowIfNil_(sel_p);	SetTableSelector(sel_p);	// total width = 310 = 20 + 150 + 2(70)	InsertCols(		4, //how many		0, //after which col		0, //data pointer		0, //data size 		false); //refresh	SetColWidth(		20,//width		1, //from this col		1);//to this col	SetColWidth(		150,//width		2, //from this col		2);//to this col		}//******************************************C_PI_AMPS_TABLE::~C_PI_AMPS_TABLE(){}#pragma mark --about one cell--//******************************************VOID	C_PI_AMPS_TABLE::get_cell_data(const STableCell  & 	cell,	//inLStr255  & 		str)			//out{	NODE  *  	nd_p = its_net_p->get_nd_ptr(its_nd);	USHORT 		r = cell.row -1;	COMPLEX 	z;	switch(cell.col){					case 1:			if(nd_p->is_active_state(r)){				str= "\p*";			}else{				str = "\p";			}					break;		case 2:			nd_p->get_st_name(r).fill_LStr255(str);			break;		case 3:			z = nd_p->get_tm_amps().read_ele(r, its_in_st);			if(its_coord_sys == rect_cs){				//The Assign's in this method are not being used to truncate_so_fits_box.				str.Assign(real(z), FIXEDDECIMAL, 15);			}else{//its_coord_sys == polar_cs				str.Assign(abs(z), FIXEDDECIMAL, 15);			}			str[0] = 15; //we only let the cell editor store 15 chars for decimals 					break;			case 4:			z = nd_p->get_tm_amps().read_ele(r, its_in_st);			if(its_coord_sys == rect_cs){				str.Assign(imag(z), FIXEDDECIMAL, 15);			}else{//its_coord_sys == polar_cs				DOUBLE degs = arg(z)*180/my_pi;				if(isnan(degs)) degs = 0;				limited_degrees(degs);				str.Assign(degs, FIXEDDECIMAL, 15);				str[0] = 15; //we only let the cell editor store 15 chars for decimals 					}					break;	}}//******************************************VOID	C_PI_AMPS_TABLE::set_cell_data(const STableCell  & 	cell,			//inconst LStr255  & 		str)			//in{	NODE  *  	nd_p = its_net_p->get_nd_ptr(its_nd);	DOUBLE		dec, x, y, radius, theta;	COMPLEX		z;	USHORT		r = cell.row -1;	switch(cell.col){		case 1:			if(str[0]==0){	//str=="\p"				nd_p->deactivate_state(r);			}else if(str[0]==1){ //str=="\p*"				nd_p->activate_state(r);			}			break;					case 2:			nd_p->set_st_name(r, STRINGY(str));			break;		case 3:			dec = double_t(str);			z = nd_p->get_tm_amps().read_ele(r, its_in_st);			if(its_coord_sys == rect_cs){				x = dec;				y = imag(z);										}else{//its_coord_sys == polar_cs				radius = dec;				theta = arg(z);				if(isnan(theta)) theta = 0;				x = radius*cos(theta);				y = radius*sin(theta);			}			nd_p->set_tm_amp(r, its_in_st, COMPLEX(x, y));			break;			case 4:			dec = double_t(str);			z = nd_p->get_tm_amps().read_ele(r, its_in_st);			if(its_coord_sys == rect_cs){				x = real(z);				y = dec;			}else{//its_coord_sys == polar_cs				radius = abs(z);				theta = dec*my_pi/180;				x = radius*cos(theta);				y = radius*sin(theta);			}			nd_p->set_tm_amp(r, its_in_st, COMPLEX(x, y));					break;	}	RefreshCell(cell);	}//******************************************			BOOLEAN		C_PI_AMPS_TABLE::str_is_valid_cell_entry(const STableCell  &    cell,	//inStr255	pstr)					//in{	DOUBLE		dec;	USHORT		r = cell.row -1;	switch(cell.col){		case 1:			SignalIf_(pstr[0]>1);			break;		case 2:			if(pstr[0]==0){				my_gen_alert("Empty node-state names are not allowed.");				return false;			}			if(!STRINGY(pstr).is_legal_name()){				my_gen_alert("You are trying to enter an illegal string for the name of a node state.");				return false;								}			break;		case 3://fall to next one		case 4:			if(pstr[0]==0){				my_gen_alert("Empty amplitude cells are not allowed.");				return false;			}			if(!STRINGY(pstr).is_double(dec)){				my_gen_alert("You are trying to enter a non-numeric string for an amplitude.");						return false;			}			break;	}	return true;		/* this code used to check that magnitude of a row was less than one:		NODE  *  nd_p = its_net_p->get_nd_ptr(its_nd);		COMPLEX  z = nd_p->get_tm_amps().read_ele(cell.row -1, its_in_st);		DOUBLE	x, y, mag;					if(cell.col==3){			if(its_coord_sys == rect_cs){				x = dec;				y = imag(z);				mag = abs(COMPLEX(x,y));										}else{//its_coord_sys == polar_cs				mag = dec;			}		}		if(cell.col==4){			if(its_coord_sys == rect_cs){				x = real(z);				y = dec;				mag = abs(COMPLEX(x,y));			}else{//its_coord_sys == polar_cs				mag = 1; // actually mag = abs(z) but there is no need to check again.			}		}		if(mag>1){					my_gen_alert("Illegal table-entry. Your entry would create an inadmissible amplitude with magnitude greater than 1. Please fix before continuing.");					return false;		}*/}//******************************************VOID	C_PI_AMPS_TABLE::delete_cell_data(const STableCell  &   cell)			//in{	NODE  * 	nd_p = its_net_p->get_nd_ptr(its_nd);	DOUBLE		x, y;	COMPLEX		z;	USHORT		r = cell.row -1;	switch(cell.col){		case 1:			nd_p->deactivate_state(r);			break;					case 2:			nd_p->set_st_name(r, STRINGY("x"));			break;		case 3:			z = nd_p->get_tm_amps().read_ele(r, its_in_st);			if(its_coord_sys == rect_cs){				x = 0;				y = imag(z);										}else{//its_coord_sys == polar_cs				x = 0;				y = 0;			}			nd_p->set_tm_amp(r, its_in_st, COMPLEX(x, y));			break;			case 4:			z = nd_p->get_tm_amps().read_ele(r, its_in_st);			if(its_coord_sys == rect_cs){				x = real(z);				y = 0;			}else{//its_coord_sys == polar_cs				x = abs(z);				y = 0;			}			nd_p->set_tm_amp(r, its_in_st, COMPLEX(x, y));					break;	}	RefreshCell(cell);	}//******************************************VOID	C_PI_AMPS_TABLE::DrawCell(const STableCell  &		inCell,			//inconst Rect  &		inLocalRect)		//in{//drawer	StCPTstate	saved_st(true, false, true);	saved_st.Normalize();	 	::TextSize(its_font_size);	::TextFont(its_font_num); 	::MoveTo(inLocalRect.left + 4, inLocalRect.bottom - 4);	LStr255  		str;		get_cell_data(inCell, str);			switch(inCell.col){		case 1:			break;		case 2:						trunc_pstr_so_it_fits(str, GetColWidth(inCell.col), 8);			break;		case 3:		case 4:			str[0] = 8;			break;	}	::DrawString(str);				draw_cell_frame(inLocalRect);//see GLOBAL_FUN.h	}//******************************************VOID	C_PI_AMPS_TABLE::ClickCell(const STableCell &		inCell,			//inconst SMouseDownEvent &	inMouseDown)	//in{	//MONITOR_THE_CHANGE_HERE				//If click on a cell out of bounds for the editor (col =1)	//or on an area outside the table	//(see C_PI_WIND::Click()),	//editor's cell is set to nullcell.	//If the editor's cell is null,	//unload_editor() does nothing and returns true 		switch(inCell.col){		case 1:						//Can't have this:			//if(its_editor_p->get_cell()==inCell)return;			//because clicking a second time on the same cell			//should toggle the activity of the state.			if(!unload_editor())break;			nullify_editor();			UnselectAllCells();									USHORT r = inCell.row - 1;			NODE  *  nd_p = its_net_p->get_nd_ptr(its_nd);			if(nd_p->is_active_state(r)){				nd_p->deactivate_state(r);			}else{				nd_p->activate_state(r);			}			RefreshCell(inCell);						BroadcastMessage(msg_pi_refresh_num_of_rows_cap);			break;		case 2:			C_EDIT_TABLE::ClickCell(inCell, inMouseDown);			break;		case 3:		case 4:			C_EDIT_TABLE::ClickCell(inCell, inMouseDown);			//Note that C_EDIT_TABLE::ClickCell() 			//sets to 31 			//the max num of characters that			//the cell editor will accept.			//In the case of columns 3 and 4,			//we don't want the default value			//so we change it.			set_max_chars_of_cell_editor(15);			BroadcastMessage(msg_pi_clear_total_prob_cap);			break;	}}#pragma mark --about many cells--//******************************************VOID	C_PI_AMPS_TABLE::set_in_st(TM_COL_NUM	 new_in_st) 		//in{	nullify_editor();	UnselectAllCells();		its_in_st =new_in_st;			STableCell  cell;	for(USHORT r=0; r<its_net_p->get_nd_ptr(its_nd)->get_degen(); r++){		cell.row = r + 1;		cell.col = 3;			RefreshCell(cell);		cell.col = 4;			RefreshCell(cell);	}}//******************************************VOID	C_PI_AMPS_TABLE::set_nd_always(USHORT new_nd)			//in {	nullify_editor();	UnselectAllCells();	its_nd =new_nd;	UInt32  num_of_rows, num_of_cols;	GetTableSize(num_of_rows, num_of_cols);		if(num_of_rows != 0){		RemoveRows(			num_of_rows, //how many			1, //starting with row			true);//refresh	}	USHORT 	degen = its_net_p->get_nd_ptr(its_nd)->get_degen();	InsertRows(		degen, //how many		0, 	//after which row		0,  //data pointer		0, 	//data size 		true); //refresh				STableCell  cell;	for(USHORT r=0; r<degen; r++){		cell.row = r + 1;		cell.col = 1;			RefreshCell(cell);		cell.col = 2;			RefreshCell(cell);	}		its_in_st = 0;	set_in_st(0);//this works even for root nodes}//******************************************VOID 	C_PI_AMPS_TABLE::set_coord_sys(COORD_SYSTEM  sys)		//in{	its_coord_sys = sys;	set_in_st(its_in_st);}//******************************************VOID	C_PI_AMPS_TABLE::activate_all_states(){	NODE  *  nd_p = its_net_p->get_nd_ptr(its_nd);	STableCell  cell;	cell.col = 1;	for(USHORT r=0; r<nd_p->get_degen(); r++){		cell.row = r + 1;		if(!nd_p->is_active_state(r)){			nd_p->activate_state(r);			RefreshCell(cell);		}	}}			//******************************************VOID	C_PI_AMPS_TABLE::deactivate_all_states(){	NODE  *  nd_p = its_net_p->get_nd_ptr(its_nd);	STableCell  cell;	cell.col = 1;	for(USHORT r=0; r<nd_p->get_degen(); r++){		cell.row = r + 1;		if(nd_p->is_active_state(r)){			nd_p->deactivate_state(r);			RefreshCell(cell);		}	}}#pragma mark --notifying total_prob_caption--			//******************************************VOID	C_PI_AMPS_TABLE::read_sub_mat(const C_SUB_MATRIX  & 	smat)				//in{	BroadcastMessage(msg_pi_clear_total_prob_cap);	C_EDIT_TABLE::read_sub_mat(smat);}			//******************************************VOID	C_PI_AMPS_TABLE::delete_selection(){	BroadcastMessage(msg_pi_clear_total_prob_cap);	C_EDIT_TABLE::delete_selection();}								