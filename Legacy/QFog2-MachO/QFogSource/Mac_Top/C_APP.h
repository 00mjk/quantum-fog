#pragma once#include "QFog_constants.h"//to get floating windows, //must include UFloatingDesktop.cp in project,//instead of UDesktop.cp#include <Sound.h>#include <MacTypes.h>#include "C_PALETTE.h"#include "C_WIND_BDS_RECO.h"#include "C_DOC.h"//******************************************class	C_APP : public LDocApplication{	private:		C_PALETTE  *  		its_palette_p;		static SHORT		its_res_file_ref_num;		#if _do_debug				LAttachment	 *   	its_debug_attachment_p;#endif	public:		C_APP();		VOID	Initialize();		VOID 	StartUp();		VOID	CatchExceptionCode(ExceptionCode	inError);				static const SHORT 		get_res_file_ref_num();		const RGBColor  & 	get_cur_color();		VOID 				set_cur_color(const RGBColor  &  color);		PALETTE_TOOL 		get_cur_tool();		VOID 				set_cur_tool(PALETTE_TOOL tool);		VOID 				create_pal();		VOID  				finish_palette_closing();		VOID				get_pal_bds(C_WIND_BDS_RECO  & 	bds);		BOOLEAN				has_pal();				VOID 		ShowAboutBox();		C_DOC  *					get_ptr_to_doc_on_duty();		virtual LModelObject  *		MakeNewDocument();					virtual VOID				OpenDocument(FSSpec *	inMacFSSpec);		virtual VOID				ChooseDocument();								BOOLEAN  	ObeyCommand(CommandT  inCommand, VOID * ioParam);		VOID 		FindCommandStatus(CommandT	inCommand, BOOLEAN	& outEnabled,			BOOLEAN & outUsesMark, UInt16 & outMark, Str255 outName_pstr);};#pragma mark -//******************************************inlineconst SHORT 	C_APP::get_res_file_ref_num(){		return its_res_file_ref_num;}	//******************************************inlineconst RGBColor  & 	C_APP::get_cur_color(){	return its_palette_p->get_cur_color();}//******************************************inlineVOID	C_APP::set_cur_color(const RGBColor  &  color)	//in{	its_palette_p->set_cur_color(color);}//******************************************inlinePALETTE_TOOL 	C_APP::get_cur_tool(){	return (its_palette_p==0)?no_tool:its_palette_p->get_cur_tool();}//******************************************inlineVOID	C_APP::set_cur_tool(PALETTE_TOOL 	tool)	//in{	its_palette_p->set_cur_tool(tool);}//******************************************inlineVOID	C_APP::get_pal_bds(C_WIND_BDS_RECO  &		bds)	//i-o{ 	//does nothing if its_palette_p = 0	bds.set_reco(its_palette_p);}//******************************************inlineBOOLEAN		C_APP::has_pal(){ 	return its_palette_p!=0;}//******************************************inlineLModelObject  * 	C_APP::MakeNewDocument(){	return new C_DOC(this, nil);//= new	//delete: ~C_DOC()}