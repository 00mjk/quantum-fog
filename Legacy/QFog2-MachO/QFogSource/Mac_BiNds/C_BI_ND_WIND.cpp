#include "C_BI_ND_WIND.h"#include "C_MAIN_VIEW.h"#include "QB_NET.h"#pragma mark --creation/destruction--//******************************************C_BI_ND_WIND::C_BI_ND_WIND(LStream  *		inStream)	//in	:LWindow(inStream),	its_selector_state(0),	its_last_touched_nd(max_ushort),	its_owner_cap_p(0),	its_check_box_p(0),	its_list_box_p(0){}//******************************************C_BI_ND_WIND::~C_BI_ND_WIND(){	its_mview_p->finish_bi_nd_wind_closing();}//******************************************VOID	C_BI_ND_WIND::show_owner(const LStr255  &  file_name)		//in{	LStr255  cap = "\pProject: ";	cap += (LStr255)file_name;	its_owner_cap_p->SetDescriptor(cap);}//******************************************VOID	C_BI_ND_WIND::special_finish_create(const LStr255  & file_name)			//in{	its_owner_cap_p =(LCaption  *)FindPaneByID(bi_nd_owner_cap_rid);	show_owner(file_name);		its_check_box_p =(LStdCheckBox  *)FindPaneByID(bi_nd_check_box_rid);	its_check_box_p->AddListener(this);		its_list_box_p =(C_BI_ND_LBOX  *)FindPaneByID(bi_nd_list_box_rid);		//its SuperCommander defined in C_MAIN_VIEW::create_bi_nd_wind()	((C_MAIN_VIEW  *)GetSuperCommander())->get_top_ptrs(its_doc_p, its_mview_p, its_net_p);	its_list_box_p->set_top_ptrs(its_doc_p, its_mview_p, its_net_p);		USHORT  num_of_bi_nds = its_net_p->get_num_of_bi_nds();	USHORT nd1, nd2;	for(USHORT loc =0; loc <num_of_bi_nds; loc++){		its_net_p->get_bi_nd(loc, nd1, nd2);		its_list_box_p->fill_first(its_net_p->get_nd_ptr(nd1)->get_name());		its_list_box_p->fill_second(its_net_p->get_nd_ptr(nd2)->get_name());	}	Show();//necessary! 	  	}#pragma mark --selector state--//******************************************VOID	C_BI_ND_WIND::ListenToMessage(MessageT  	inMessage,		//inVOID  * 	ioParam )		//i-o{	//MONITOR_THE_CHANGE_HERE	//doc: no change	switch ( inMessage ) {		case msg_bi_nd_check_box:			its_selector_state = *((SInt32  *)ioParam);//  either 0 or 1			break;	}}#pragma mark --list box--//******************************************VOID	C_BI_ND_WIND::respond_to_bi_nd_selector(USHORT touched_nd)		//in{	if(its_list_box_p->get_occupancy_of_last_row() == 2){		its_list_box_p->fill_first(its_net_p->get_nd_ptr(touched_nd)->get_name());		its_last_touched_nd = touched_nd;	}else{//occupancy==1		if(its_net_p->add_bi_nd(its_last_touched_nd, touched_nd)){			//add_bi_nd checks whether 			//(1)this bi-node has been added before, and			//(2)the bi_node is degenerate (i.e., nd1==nd2). 			//It returns true if (1) and (2) are both false.			its_list_box_p->fill_second(its_net_p->get_nd_ptr(touched_nd)->get_name());			its_last_touched_nd = touched_nd;		}// if we found the bi-node repeated or degenerate 		//then DON'T want to reset its_last_touched_nd  to touched_nd;					}	}	 //******************************************VOID	C_BI_ND_WIND::rename_a_nd(USHORT nd,					//inStr255 new_name_pstr)		//in 	{	USHORT  num_of_bi_nds = its_net_p->get_num_of_bi_nds();	USHORT nd1, nd2;	LStr255 name;	for(USHORT loc =0; loc <num_of_bi_nds; loc++){		its_net_p->get_bi_nd(loc, nd1, nd2);		if(nd==nd1){			its_net_p->get_nd_ptr(nd2)->get_name().fill_LStr255(name);			name = (LStr255)new_name_pstr +(LStr255)"\p \\ " + name;			its_list_box_p->refresh_a_row(loc, name);		}			if(nd==nd2){			its_net_p->get_nd_ptr(nd1)->get_name().fill_LStr255(name);			name = name +(LStr255)"\p \\ " + (LStr255)new_name_pstr;			its_list_box_p->refresh_a_row(loc, name);		}		}}	