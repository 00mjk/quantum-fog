#pragma onceconst USHORT	pix_per_in = 72;const USHORT	max_ushort = 65535;const LONG		max_long = 0x7FFFFFFF;  const DOUBLE	my_pi = 3.14159265358979323846;const DOUBLE	nat_log_of_2 = .69314718056;//With Symantec 8 compiler, use  my_endline='\r'//The ansi endl is used with cout only, I think.//It forces the text preceeding endl to be printed immediately on the console.const CHAR		my_endline = '\n';const USHORT	max_file_path_len = 1024;//we allow the user to write "-0." + 12 other characters for a total of 15 charactersconst DOUBLE	amps_floor = 1e-11;const DOUBLE	probs_floor = 1e-11; enum COORD_SYSTEM {polar_cs, rect_cs};#pragma mark ---------used only with macgui--------#ifdef   _mac_gui_app //''''''''''''''''''''''''''''''''''''''''''''\\.#pragma mark --general constants:--const 	Rect  the_zero_rect = {0x0000, 0x0000, 0x0000, 0x0000};const OSType	my_creator_id			= 'QFog';const OSType	my_file_type_id			= 'QNet';//undel_reco = long record of selection, used to del and then  undel//paste_reco = short record of selection, used to copy and then paste  enum NET_STREAM_TYPE {open_reco, paste_reco, undel_reco};#pragma mark --version constants:--/*from <MacTypes.h>*************************struct NumVersion {	UInt8		majorRev;//1st part of version number in BCD	UInt8		minorAndBugRev;//2nd & 3rd part of version number share a byte	UInt8		stage;//stage code: dev, alpha, beta, final	UInt8		nonRelRev;//revision level of non-released version};	developStage				= 0x20,	alphaStage					= 0x40	betaStage					= 0x60,	finalStage					= 0x80,*/const	SInt32	k_vers_100		=	0x01008001; 	// 1.0.0, fin, release 1const	SInt32	k_vers_150		=	0x01508001; 	// 1.5.0, fin, release 1const	SInt32	k_vers_160		=	0x01608000; 	// 1.6.0, fin, release 0const	SInt32	k_vers_200		=	0x02008000; 	// 2.0.0, fin, release 0const	SInt32	k_vers_app		=	k_vers_200; #pragma mark --uaction related--const USHORT	max_num_of_act_types 		= 2;//mviewconst USHORT	mview_num_of_act_types 		= 1;const USHORT	mview_del 					= 0;//etableconst USHORT	etable_num_of_act_types 	= 2;const USHORT	etable_del 					= 0;const USHORT	etable_paste 				= 1;// SInt32: PaneIDT, CommandT, MessageT// SInt16: ResIDT   	//rid = resource (object) id#pragma mark --toolbox resources--#pragma mark	'ALRT' rids		const ResIDT  	gen_alert_rid = 			129;	const ResIDT  	cannot_undo_alert_rid = 	131;#pragma mark	'cicn' rids	const ResIDT  	fog_horn_icon_rid = 	128;	#pragma mark	'CURS' rids	const ResIDT  	pointing_hand_rid = 			200;	const ResIDT  	open_hand_rid = 				205;	const ResIDT  	closed_hand_rid = 				206;	const ResIDT  	explosion_rid = 				207;	const ResIDT	clockwise_rot_rid =     		211;	const ResIDT	paint_brush_rid =	    		212;	const ResIDT	eye_dropper_rid =	    		213;	const ResIDT	bow_and_arrow_rid =     		215;	const ResIDT	arrow_source_rid =     			216;		const ResIDT  	bi_node_and_pointing_hand_rid = 400;	#pragma mark	'ICN#' rids	const ResIDT 	qbit_rot_icon_rid =	200;	const ResIDT 	sg_magnet_icon_rid =		201;#pragma mark	'inc#' rids	// tools:		const ResIDT 	selection_tool_rid =		1110;	const ResIDT 	drag_tool_rid =				1120;	const ResIDT 	open_tool_rid =				1130;	const ResIDT 	rotation_tool_rid =			1140;	const ResIDT 	paint_tool_rid =			1150;	const ResIDT 	copy_color_tool_rid =		1160;			const ResIDT 	arrow_tool_rid =			1170;	const ResIDT 	arrow_source_tool_rid =		1180;		const ResIDT 	beam_spl_tool_rid =			1190;	const ResIDT 	custom_node_tool_rid =		1200;	const ResIDT 	determ_node_tool_rid =		1210;	const ResIDT 	pol_rot_tool_rid =			1220;	const ResIDT 	pol_tool_rid =				1230;	const ResIDT 	qbit_rot_tool_rid =			1240;	const ResIDT 	sg_magnet_tool_rid =		1250;		const ResIDT 	bi_nd_selector_tool_rid =	1300;#pragma mark	'MENU' rids	const ResIDT	project_menu_rid = 			255;#pragma mark	'ppat' rids	const ResIDT	pol_rot_pat_rid = 		200;	const ResIDT	pol_pat_rid = 			250;	#pragma mark	'PICT' rids	const ResIDT  	ggate_pict_rid = 		128;#pragma mark	'snd ' rids		const ResIDT  	fog_horn_snd_rid = 		3001;	#pragma mark	'STR#' rids	const ResIDT	my_redo_rid = 			250;	const ResIDT	my_undo_rid	=			251;	const ResIDT	undel_ind =				1;	const ResIDT	uncut_ind =				2;	const ResIDT	unpaste_ind =			3;		#pragma mark --PP specific resources--	#pragma mark	'Txtr' rids	//old fonts (see Fonts.h and Think Ref.)	//systemFont = 0 (Chicago or Charcoal 12-pt, bold looking, as in menus)	//applFont = 1 (Geneva 12-pt)	//Aliasing makes Geneva look very bad in Carbon MacOSX so I won't use it anymore;	//will use Verdana instead.	//MacOSX systemFont is Lucida Grande bold? 	//MacOSX applFont is Lucida Grande plain?	const ResIDT	sysFont12_rid =			201;	const ResIDT	sysFont12_c_rid =		202;	const ResIDT	node_txt_rid =			sysFont12_c_rid;	const ResIDT	sysFont12_ul_rid =		203;	const ResIDT	Verdana9_rid =			300;	const ResIDT	Verdana12_rid =			311;	#pragma mark	'PPob' rids	//ata = about this application	const ResIDT  	ata_window_rid = 			1000;	const ResIDT  	ata_fog_horn_but_rid = 		1002;	//main	const ResIDT  	main_window_rid = 			1050;	const ResIDT  	main_scroller_rid =			1051;	const ResIDT  	mview_rid = 				1052;	const ResIDT  	main_wind_cap_rid = 		1053;	//pal = palette	const ResIDT 	pal_rid = 					1100;	const ResIDT 	pal_icon_table_rid = 		1101;	const ResIDT 	pal_swatch_rid = 			1151;	const ResIDT 	pal_nd_tool_popup_rid = 	1190;	// 1110- 1300 reserved for tool static caption rids 	//printing	const ResIDT 	printout_rid = 				1400;	const ResIDT 	placeholder_rid = 			1401;	//other_fsize = other font size	const ResIDT 	other_fsize_window_rid = 	1500;	const ResIDT 	other_fsize_efield_rid = 	1504;	//ds = drawing size	const ResIDT 	ds_window_rid = 			1600;	const ResIDT 	ds_horiz_efield_rid = 		1606;	const ResIDT 	ds_vert_efield_rid = 		1607;  	const ResIDT	ds_page_setup_but_rid=		1608;		//tf = text files	const ResIDT	tf_folder_but_rid=			1703;		const ResIDT	tf_folder_cap_rid=			1704;	const ResIDT	tf_prefix_efield_rid=		1705;		const ResIDT	tf_window_rid=				1700;	const ResIDT	tf_ecases_cbox_rid=			1711;//cbox=check box	const ResIDT	tf_nd_probs_cbox_rid=		1712;	const ResIDT	tf_bi_nd_probs_cbox_rid=	1713;	const ResIDT	tf_stories_cbox_rid=		1714;		//af = amplitudes filter	const ResIDT	af_wind_rid=				1780;	const ResIDT	af_des_finesse_efield_rid=	1783;	const ResIDT	af_cur_finesse_cap_rid=		1784; 	//pi= prior information			const ResIDT	pi_wind_rid=				1800;	//1800=small pi_wind, 1801=large pi_wind	//so pane rid 1801 in use.	const ResIDT	pi_owner_cap_rid=     		1805; 	const ResIDT	pi_nd_efield_rid=	  		1811;	const ResIDT	pi_nd_popup_rid=			1812;	const ResIDT	pi_first_nd_but_rid=		1813;	const ResIDT	pi_next_nd_but_rid=			1814;	const ResIDT	pi_reorder_nds_but_rid=		1815;		const ResIDT	pi_first_in_st_but_rid=	  	1830;	const ResIDT	pi_prev_in_st_but_rid=	  	1831;	const ResIDT	pi_next_in_st_but_rid=		1832;	const ResIDT	pi_parents_table_rid=		1836;	const ResIDT	pi_reorder_in_nds_but_rid=	1837;					const ResIDT	pi_all_act_but_rid=			1842;	const ResIDT	pi_none_act_but_rid=		1843;		const ResIDT	pi_polar_radio_rid=			1844;	const ResIDT	pi_rect_radio_rid=			1845;	const ResIDT	pi_rad_re_cap_rid=			1848;	const ResIDT	pi_ang_im_cap_rid=			1849;		const ResIDT	pi_amps_table_rid=			1851;	const ResIDT	pi_reorder_nd_sts_but_rid=	1852;			const ResIDT	pi_num_of_rows_cap_rid=		1860;		const ResIDT	pi_num_of_rows_but_rid=		1861;	const ResIDT	pi_total_prob_but_rid=		1870;	const ResIDT	pi_total_prob_cap_rid=		1871;	const ResIDT	pi_gen_st_names_but_rid=	1881;	const ResIDT	pi_gen_amps_but_rid=		1882;	//bi_nd = bi-nodes of interest			const ResIDT	bi_nd_wind_rid	=			1900;	const ResIDT	bi_nd_list_box_rid =     	1910;	const ResIDT	bi_nd_check_box_rid =     	1920; 	const ResIDT	bi_nd_owner_cap_rid =     	1940;	//nd_probs = node probs	const ResIDT	nd_probs_wind_rid=			2000;	const ResIDT	nd_probs_owner_cap_rid=		2001;	const ResIDT	nd_probs_popup_rid=			2010;	const ResIDT	nd_probs_first_but_rid=		2011;	const ResIDT	nd_probs_next_but_rid=		2012;	const ResIDT	nd_probs_info_cap_rid=		2016;	const ResIDT	nd_probs_table_rid=			2021;	//bi_nd_probs = bi-nodes probs	const ResIDT	bi_nd_probs_wind_rid=		2100;	const ResIDT	bi_nd_probs_owner_cap_rid=	2101;	const ResIDT	bi_nd_probs_popup_rid=		2110;	const ResIDT	bi_nd_probs_first_but_rid=	2111;	const ResIDT	bi_nd_probs_next_but_rid=	2112;	const ResIDT	bi_nd_probs_state_cap_rid=	2115;	const ResIDT	bi_nd_probs_info_cap_rid=	2117;	const ResIDT	bi_nd_probs_scroller_rid=	2120;	const ResIDT	bi_nd_probs_table_rid=		2121;	const ResIDT	bi_nd_probs_lmargin_rid=	2122;	const ResIDT	bi_nd_probs_tmargin_rid=	2123;	//sto = stories	const ResIDT	sto_wind_rid=				2200;		const ResIDT	sto_wind_owner_cap_rid=		2201;	const ResIDT	sto_wind_cs_cap_rid=		2203;	const ResIDT	sto_wind_popup_rid=			2204;	const ResIDT	sto_wind_polar_radio_rid=	2211; 	const ResIDT	sto_wind_rect_radio_rid=	2212; 	const ResIDT	sto_wind_first_but_rid=		2213;	const ResIDT	sto_wind_next_but_rid=		2214;	//det= deterministic node	const ResIDT	det_wind_rid= 				2300;	const ResIDT	det_nd_type_popup_rid= 		2311;	const ResIDT	det_host_view_rid= 			2312;	const ResIDT	cnot_pane_rid=				2320;	const ResIDT	cnot_pa1_radio_rid=			2322;	const ResIDT	cnot_pa2_radio_rid=			2323;	const ResIDT	cnot_0fires_radio_rid=		2325;	const ResIDT	cnot_1fires_radio_rid=		2326;	const ResIDT	marg_pane_rid=  			2340;	const ResIDT	marg_pos_efield_rid=		2342;	const ResIDT	marg_len_efield_rid=		2344;	const ResIDT	pshifter_pane_rid=			2360;	const ResIDT	pshifter_theta_efield_rid=	2362;	const ResIDT	pshifter_check_box_rid=		2364;	//sg_magnet = Stern Gerlach magnet	const ResIDT	sg_magnet_window_rid=		2400;	const ResIDT	sg_magnet_theta_efield_rid=	2413;		const ResIDT	sg_magnet_phi_efield_rid=	2415;			const ResIDT	sg_magnet_table_rid=		2426;		//bs = beam splitter		const ResIDT	bs_window_rid=				2500;		const ResIDT	bs_tau_mag_sq_efield_rid=	2512;	const ResIDT	bs_tau_ang_efield_rid=		2514;	const ResIDT	bs_rho_ang_efield_rid=		2516;	const ResIDT	bs_max_n_sum_efield_rid=	2518;	//pol = polarizer		const ResIDT	pol_window_rid=				2600;		const ResIDT	pol_efield_rid=				2612;	//pol_rot = polarization rotator		const ResIDT	pol_rot_window_rid=			2700;		const ResIDT	pol_rot_efield_rid=			2712;	//qbit_rot = qbit rotation	const ResIDT	qbit_rot_window_rid=		2800;	const ResIDT	qbit_rot_theta0_efield_rid=	2820;		const ResIDT	qbit_rot_theta1_efield_rid=	2821;		const ResIDT	qbit_rot_theta2_efield_rid=	2822;		const ResIDT	qbit_rot_theta3_efield_rid=	2823;	//rows = number of rows	const ResIDT	rows_wind_rid=				4000;	const ResIDT	rows_wind_ok_but_rid=		4001;	const ResIDT	rows_wind_cancel_but_rid=	4002;	const ResIDT	rows_wind_efield_rid=		4003;		//q = queue	const ResIDT	q_wind_rid=				4100;		const ResIDT	q_abc_but_rid=			4103;	const ResIDT	qtable_rid=				4112;	//gn = generate names		const ResIDT	gn_wind_rid=				4200;					const ResIDT	gn_num_of_comps_efield_rid= 4212;	const ResIDT	gn_min_char_efield_rid=		4222;	const ResIDT	gn_max_char_efield_rid=		4224;	const ResIDT	gn_commas_check_box_rid =	4231;			//pv = preview	const ResIDT	pv_window_rid  = 			4300;	const ResIDT	pv_total_prob_rid = 		4310;	const ResIDT	pv_num_of_stories_rid =		4311;	//dynamically allocated panes	const PaneIDT	first_nd_efield_rid =			10001;		const PaneIDT  	first_pi_pa_st_popup_PPob_rid = 20001;	//permission dialog	const ResIDT	per_dial_rid  = 			4400;	const ResIDT	per_dial_cap_rid = 			4410;			#pragma mark	'RidL' rids	const ResIDT	pal_ridl =     			pal_rid;		const ResIDT	pi_wind_ridl =     		pi_wind_rid;	const ResIDT	bi_nd_wind_ridl = 		bi_nd_wind_rid;	const ResIDT	nd_probs_wind_ridl =    nd_probs_wind_rid;	const ResIDT	bi_nd_probs_wind_ridl = bi_nd_probs_wind_rid;	const ResIDT	sto_wind_ridl = 		sto_wind_rid;	#pragma mark	commands	const CommandT 	cmd_import = 			2001;	const CommandT 	cmd_import_nd_sts = 	20011;	const CommandT 	cmd_import_amps = 		20012;			const CommandT 	cmd_export = 			2002;	const CommandT 	cmd_export_topology = 	20021;	const CommandT 	cmd_export_nd_sts = 	20022;	const CommandT 	cmd_export_amps = 		20023;		const CommandT 	cmd_drawing_size= 			3001;		const CommandT 	cmd_grid_lines= 			3002;	const CommandT 	cmd_choose_color= 			3003;	const CommandT	cmd_filter_out_small_amps=	3005;	const CommandT	cmd_preview=						4002;	const CommandT	cmd_text_files=						4003;	const CommandT	cmd_do_one_ecase_at_a_time=			4004;	const CommandT	cmd_illustrate_stories=				4005;	const CommandT	cmd_initial_run_state=		5001;	const CommandT	cmd_go_forward=				5002;	const CommandT 	cmd_active_project=	 		6001;	const CommandT 	cmd_show_main_wind=	 		6002;	const CommandT 	cmd_show_palette=	 		6003;	const CommandT 	cmd_show_pi_wind=	 		6004;	const CommandT 	cmd_show_bi_nd_wind=	 	6005;	const CommandT 	cmd_show_nd_probs_wind=		6006;	const CommandT 	cmd_show_bi_nd_probs_wind=	6007;	const CommandT 	cmd_show_stories_wind=		6008;					const CommandT	cmd_close_all_non_main_winds = 	6100;	const CommandT	cmd_doc_SetModified = 			6101;#pragma mark	messages		//ata = about this application	const MessageT	msg_ata_fog_horn_but= 		ata_fog_horn_but_rid;	//pal = palette	const MessageT	msg_pal_nd_tool_popup = pal_nd_tool_popup_rid;	//tf = text files	const MessageT	msg_tf_folder_but=			tf_folder_but_rid;	//mv = main view		const MessageT	msg_mv_nd_efield=			mview_rid;	//pi = prior info		const MessageT	msg_pi_refresh_num_of_rows_cap= pi_amps_table_rid;	const MessageT	msg_pi_nd_efield=				pi_nd_efield_rid;	const MessageT	msg_pi_nd_popup=				pi_nd_popup_rid;	const MessageT	msg_pi_first_nd_but=			pi_first_nd_but_rid;	const MessageT	msg_pi_next_nd_but=	 			pi_next_nd_but_rid;	const MessageT	msg_pi_reorder_nds_but=	 		pi_reorder_nds_but_rid;			const MessageT	msg_pi_reorder_in_nds_but=		pi_reorder_in_nds_but_rid;			const MessageT	msg_pi_reorder_nd_sts_but=		pi_reorder_nd_sts_but_rid;			const MessageT	msg_pi_first_in_st_but=			pi_first_in_st_but_rid;	const MessageT	msg_pi_prev_in_st_but=			pi_prev_in_st_but_rid;	const MessageT	msg_pi_next_in_st_but=   		pi_next_in_st_but_rid;	const MessageT	msg_pi_all_act_but=				pi_all_act_but_rid;	const MessageT	msg_pi_none_act_but=			pi_none_act_but_rid;	const MessageT	msg_pi_polar_radio=				pi_polar_radio_rid;	const MessageT	msg_pi_clear_total_prob_cap= 	pi_total_prob_cap_rid;	const MessageT	msg_pi_total_prob_but = 	pi_total_prob_but_rid;	const MessageT	msg_pi_num_of_rows_but=		pi_num_of_rows_but_rid;	const MessageT	msg_pi_gen_st_names_but=	pi_gen_st_names_but_rid;	const MessageT	msg_pi_gen_amps_but=		pi_gen_amps_but_rid;	//bi_nd = bi-nodes of interest			const MessageT	msg_bi_nd_check_box	=		bi_nd_check_box_rid;		//nd_probs = node probs	const MessageT	msg_nd_probs_popup=			nd_probs_popup_rid;	const MessageT	msg_nd_probs_first_but=		nd_probs_first_but_rid;	const MessageT	msg_nd_probs_next_but=		nd_probs_next_but_rid;	//bi_nd_probs = bi-nodes probs	const MessageT	msg_bi_nd_probs_popup=		bi_nd_probs_popup_rid;	const MessageT	msg_bi_nd_probs_first_but=	bi_nd_probs_first_but_rid;	const MessageT	msg_bi_nd_probs_next_but=	bi_nd_probs_next_but_rid;	//sto = stories	const MessageT	msg_sto_wind_popup=			sto_wind_popup_rid;	const MessageT	msg_sto_wind_polar_radio=	sto_wind_polar_radio_rid;	const MessageT	msg_sto_wind_first_but=		sto_wind_first_but_rid;		const MessageT	msg_sto_wind_next_but=		sto_wind_next_but_rid;	//det= deterministic node	const MessageT	msg_det_nd_type_popup = 	det_nd_type_popup_rid;	//q = queue	const MessageT	msg_q_abc_but =			q_abc_but_rid;	#endif //_mac_gui_app \\............................................//