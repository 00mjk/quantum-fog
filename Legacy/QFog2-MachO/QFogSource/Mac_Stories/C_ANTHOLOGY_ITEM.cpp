#include "C_ANTHOLOGY_ITEM.h"#include "GLOBAL_FUN.h"	#pragma mark --creation/destruction--//******************************************C_ANTHOLOGY_ITEM::C_ANTHOLOGY_ITEM(const VECTOR<USHORT>  &  net_story,		//inconst COMPLEX  & net_amp,				//inUSHORT ending)							//in{	its_net_story = net_story;	its_net_amp = net_amp;	its_ending = ending;}//******************************************C_ANTHOLOGY_ITEM::C_ANTHOLOGY_ITEM(){}#pragma mark --const functions--//******************************************LStr255		C_ANTHOLOGY_ITEM::get_descriptor(USHORT num,				//inCOORD_SYSTEM  sys)		//inconst{		DOUBLE   x, y ;	if(sys == rect_cs){		x=real(its_net_amp);		y=imag(its_net_amp);	}else{		x=abs(its_net_amp);		y=arg(its_net_amp)*180/my_pi;		if(isnan(y)) y=0;		limited_degrees(y);	}	LStr255  x_str;	x_str.Assign(x, FIXEDDECIMAL, 15);	x_str[0] = 8;	LStr255  y_str;	y_str.Assign(y, FIXEDDECIMAL, 15);	y_str[0] = 8;	Str255   num_pstr;	::NumToString(num, num_pstr);	LStr255 	descriptor = 			"\p( " +		x_str +		"\p,  " +		y_str +		"\p )   (" + 		num_pstr + 		"\p)";    	return descriptor;}//******************************************BOOLEAN  operator==(const C_ANTHOLOGY_ITEM  & it1,		//inconst C_ANTHOLOGY_ITEM  & it2)		//in{	return (		it1.its_net_story == it2.its_net_story &&		it1.its_net_amp == it2.its_net_amp &&		it1.its_ending == it2.its_ending	);}