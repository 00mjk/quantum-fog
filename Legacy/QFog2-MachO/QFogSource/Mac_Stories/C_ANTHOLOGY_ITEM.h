#pragma once#include "QFog_constants.h"#include "VECTOR.h"//******************************************class C_ANTHOLOGY_ITEM{// An anthology is  a collection of net stories// and information about each net story.private:	VECTOR<USHORT> its_net_story;	COMPLEX 	its_net_amp;	USHORT 	its_ending; // 1 based	public:		C_ANTHOLOGY_ITEM();	C_ANTHOLOGY_ITEM(		const VECTOR<USHORT>  &  net_story,		const COMPLEX  & net_amp,		USHORT ending);			const VECTOR<USHORT>  *  get_net_story_ptr() const;	USHORT  	get_ending() const;	LStr255  	get_descriptor(USHORT num, COORD_SYSTEM  sys) const;		friend BOOLEAN  operator==(		const C_ANTHOLOGY_ITEM  & it1,		const C_ANTHOLOGY_ITEM  & it2);	friend BOOLEAN  operator!=(		const C_ANTHOLOGY_ITEM  & it1,		const C_ANTHOLOGY_ITEM  & it2);		};#pragma mark -//******************************************inlineconst VECTOR<USHORT>  *  C_ANTHOLOGY_ITEM::get_net_story_ptr() const{	return &its_net_story;}//******************************************inlineUSHORT  C_ANTHOLOGY_ITEM::get_ending() const{	return its_ending;}//******************************************inlineBOOLEAN  operator!=(const C_ANTHOLOGY_ITEM  &	it1,	//inconst C_ANTHOLOGY_ITEM  &	it2)	//in{	return !(it1==it2);}