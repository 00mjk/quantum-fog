#pragma once#include "QFog_constants.h"#include "VECTOR.h"#include "NODE.h"//det = deterministic#ifdef   _mac_gui_app //''''''''''''''''''''''''''''''''''''''''''''\\.	class QB_NET;	class C_PI_WIND;	class C_DET_ND_AMP_GEN;		enum DET_ND_TYPE {k_cnot=1, k_marg, k_pshifter};#endif //_mac_gui_app \\............................................////******************************************class DET_ND : public NODE{private:public:		 			DET_ND();	virtual ~DET_ND();	#ifdef   _mac_gui_app //''''''''''''''''''''''''''''''''''''''''''''\\.private:	// The node has one s/d port that can carry unlimited s and d loads.	// loc = the center of the icon,	// greeting_rad = sel_rad	// docking_rad = mask_rad	enum {sel_rad=8, mask_rad=6};	RGBColor  its_color;public:	DET_ND( const Point  &  m_down_pt);		STRINGY			get_class_str();	ND_CLASS_ID		get_class_id();			virtual VOID set_st_names_to_default();			virtual USHORT	get_sel_rad() const;	virtual USHORT	get_mask_rad() const;	const RGBColor  &	get_color() const;	BOOLEAN 	has_color();	VOID		set_color(const RGBColor  & color);		VOID  	draw();	VOID   	undraw();		VOID	call_amp_gen(QB_NET *  net_p, C_PI_WIND * pi_wind_p);		#endif //_mac_gui_app \\............................................//};#pragma mark -#ifdef   _mac_gui_app //''''''''''''''''''''''''''''''''''''''''''''\\.//******************************************inlineSTRINGY 	DET_ND::get_class_str(){	return "DET_ND";}//******************************************inlineND_CLASS_ID		DET_ND::get_class_id(){	return DET_ND_id;}//******************************************inlineVOID 	DET_ND::set_st_names_to_default(){	set_st_names_to_monotone_seq(0);}//******************************************inlineUSHORT	DET_ND::get_sel_rad() 	const{	return sel_rad;}//******************************************inlineUSHORT	DET_ND::get_mask_rad()	const{	return mask_rad;}//******************************************inlineconst RGBColor  &	DET_ND::get_color() const{	return its_color;}//******************************************inlineBOOLEAN 	DET_ND::has_color(){	return true;}//******************************************inlineVOID	DET_ND::set_color(const RGBColor  &	color)	//in{	its_color = color;}//******************************************inlineVOID	DET_ND::undraw(){	NODE::undraw(mask_rad);}#endif //_mac_gui_app \\............................................//