#include "SG_MAGNET.h"#ifdef   _mac_gui_app //''''''''''''''''''''''''''''''''''''''''''''\\.	#include "C_SG_MAGNET_AMP_GEN.h"#endif //_mac_gui_app \\............................................//#pragma mark --creation/destruction--//******************************************SG_MAGNET::SG_MAGNET(){}//******************************************SG_MAGNET::~SG_MAGNET(){}#pragma mark ----used only with macgui----#ifdef   _mac_gui_app //''''''''''''''''''''''''''''''''''''''''''''\\.#pragma mark --creation/destruction--//******************************************SG_MAGNET::SG_MAGNET(const Point  &		m_down_pt)	//in	:NODE( m_down_pt){}#pragma mark --state names--//******************************************VOID	SG_MAGNET::set_st_names_to_default(){	VECTOR<USHORT> degens(2, 2);	STRETCH_OR_FOLD sof(degens);	for(USHORT row=0; row<4; row++){		USHORT n_neg = sof.vec_label(row)[0];		USHORT n_pos = sof.vec_label(row)[1];		its_st_names[row]= STRINGY("(") && n_neg && n_pos && ")"; 			}}#pragma mark --drawing--//******************************************VOID	SG_MAGNET::draw(){//drawer	its_efield_p->Draw(0);	if(!its_efield_p->GetSuperView()->FocusDraw())return;	if(its_state_num_for_cap!=max_ushort) draw_state_cap();	Rect r;	::SetRect(&r, 	its_center.h -default_mask_rad, its_center.v -default_mask_rad,					its_center.h +default_mask_rad, its_center.v +default_mask_rad);	::PlotIconID(&r, atNone, ttNone, sg_magnet_icon_rid);/* 	//kept crashing:	CIconHandle  icon_h = ::GetCIcon( 128);	//destroy_h: in this method	ThrowIfNil_(icon_h);	if(icon_h!=0){		::LoadResource((Handle)icon_h);		::PlotCIcon(&r, icon_h);		ReleaseResource_((Handle)icon_h);	}*/}#pragma mark --in_nd changes--//******************************************VOID	SG_MAGNET::add_in_nd(USHORT 		nd_id,		//in	USHORT 		nd_degen)	//in{	NODE::add_in_nd(nd_id, nd_degen);	//if sg magnet params dialog has never been called, do nothing else	if(its_amp_gen_p!=0){		((C_SG_MAGNET_AMP_GEN *)its_amp_gen_p)->resize(its_in_nds.get_len());	}}//******************************************VOID	SG_MAGNET::del_in_nd(USHORT nd_id)		//in	{	//if sg magnet params dialog has never been called, do nothing else	if(its_amp_gen_p!=0){		USHORT loc= its_in_nds.loc_of_target(nd_id);		((C_SG_MAGNET_AMP_GEN *)its_amp_gen_p)->extract_at(loc);	}	//it's important to call this last because 	//it deletes nd_id from the its_in_nds vector			NODE::del_in_nd(nd_id);}//******************************************VOID	SG_MAGNET::reorder_in_nds(const UI_MAP  &		map,		//inBOOLEAN				touch_tm)	//in{	NODE::reorder_in_nds(map, touch_tm);	//if sg magnet params dialog has never been called, do nothing else	if(its_amp_gen_p!=0){		((C_SG_MAGNET_AMP_GEN *)its_amp_gen_p)->reorder(map);	}}#pragma mark --amp gen--//******************************************VOID	SG_MAGNET::call_amp_gen(QB_NET *  net_p, 		//inC_PI_WIND * pi_wind_p)	//in{	if(its_amp_gen_p==0){//set to nil in NODE::NODE() and NODE::NODE(const Point  & center)		its_amp_gen_p = new C_SG_MAGNET_AMP_GEN(this, net_p, pi_wind_p);		//delete:  by NODE::~NODE()							//Created first time it is used,		ThrowIfNil_(its_amp_gen_p );	}	its_amp_gen_p->talk();}//******************************************VOID	SG_MAGNET::obey_amp_gen(const USHORT  * 	in_sums_p,	//inconst USHORT  * 	in_rows_p,	//inconst SHORT  * 		in_spins_p)	//in{	empty_trans_mat();	SHORT 	row = -1;	COMPLEX	z(0, 0);	BOOLEAN 	cur_n1_n2_pair_is_accepted;// n1 = n_neg, n2 = n_pos	for(USHORT sum=0; sum<=1; sum++){ 	// sum = n1 + n2;		for(USHORT  n2=0; n2<= sum; n2++){			USHORT n1 = sum - n2;			cur_n1_n2_pair_is_accepted = false;			for(TM_COL_NUM in_st=0; in_st<its_num_of_in_sts; in_st++){							z = ((C_SG_MAGNET_AMP_GEN *)its_amp_gen_p)->sg_magnet_amp(n1, n2, in_sums_p[in_st], in_rows_p[in_st], in_spins_p[in_st]);				if(abs(z)>=amps_floor){					if(!cur_n1_n2_pair_is_accepted){						row++;						its_st_names[row] = STRINGY("(") && n1 && "," && n2 && ")";						cur_n1_n2_pair_is_accepted=true;					}					its_tm_amps.set_ele(row, in_st, z);				}			}		}	}}	#endif //_mac_gui_app \\............................................//	