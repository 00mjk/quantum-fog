#include "C_KEYS.h"//******************************************/*Below code comes from TCL 1.1.3. For examples of its use, see Art Class.keycodes: shift_key = 0x38, control_key = 0x3B, option_key=0x3A, command_key = 0X37, space_bar= 0x31;For other keycodes, see Think Reference under "Extended Keyboard".An alternative way of detecting cmdKey: if	( (thisEvent->modifiers & cmdKey) == cmdKey) )*///******************************************// KeyIsDown // //		Determine whether or not the specified key is being pressed. Keys//		are specified by hardware-specific key code (NOT the character).//******************************************BOOLEAN	 C_KEYS::KeyIsDown( SHORT theKeyCode)//in{	KeyMap			theKeys;		::GetKeys( theKeys);					// Get state of each key										/*  Ordering of bits in a KeyMap is truly bizarre. A KeyMap is a	 16-byte (128 bits) array where each bit specifies the start	 of a key (0 = up, 1 = down). We isolate the bit for the		 specified key code by first determining the byte position in	 the KeyMap and then the bit position within that byte.		 Key codes 0-7 are in the first byte (offset 0 from the		 start), codes 8-15 are in the second, etc. The BitTst() trap	 counts bits starting from the high-order bit of the byte.	 For example, for key code 58 (the option key), we look at	 the 8th byte (7 offset from the first byte) and the 5th bit	 within that byte.											 */			return ( ::BitTst( ((char *) &theKeys) + theKeyCode / 8,					(long) 7 - (theKeyCode % 8) ) );				}//******************************************EKeyStatus	C_KEYS::my_PrintingCharField(	TEHandle	/* inMacTEH */,	UInt16		inKeyCode,	UInt16		&ioCharCode,	EventModifiers		/* inModifiers */){// UKeyFilters::PrintingCharField() accepts ASCII 32, 33, ...126// Here we accept all these except// # and the blank space (=char_Space=0x20=32)	EKeyStatus	theKeyStatus = keyStatus_PassUp;		if (UKeyFilters::IsTEDeleteKey(inKeyCode)) {		theKeyStatus = keyStatus_TEDelete;	} else if (UKeyFilters::IsTECursorKey(inKeyCode)) {		theKeyStatus = keyStatus_TECursor;	} else if (UKeyFilters::IsExtraEditKey(inKeyCode)) {		theKeyStatus = keyStatus_ExtraEdit;	} else if (UKeyFilters::IsPrintingChar(ioCharCode)) {		if (ioCharCode=='#'  || ioCharCode==char_Space) {			theKeyStatus = keyStatus_Reject;		} else {			theKeyStatus = keyStatus_Input;		}	}		return theKeyStatus;}//******************************************