// Class which controls the loading and disposing of a subpane.#include "C_HOST_VIEW.h"#include <PP_Constants.h>#include <LStream.h>#include <UDrawingState.h>#include <UReanimator.h>#pragma mark --creation/destruction--//----------------------------------------------------------------------------------------// Default constructorC_HOST_VIEW::C_HOST_VIEW()	: mCurrentIncludedPane(nil),	mPaneID(PaneIDT_Undefined){}//----------------------------------------------------------------------------------------//	Does shallow copy; SubPanes are not copied.C_HOST_VIEW::C_HOST_VIEW(const C_HOST_VIEW &		inOriginal) 		//in	: LView(inOriginal),	mCurrentIncludedPane(nil){	mPaneID = inOriginal.mPaneID;}//----------------------------------------------------------------------------------------// create C_HOST_VIEW from the passed in dataC_HOST_VIEW::C_HOST_VIEW(const SPaneInfo &	inPaneInfo,		//inconst SViewInfo &	inViewInfo, 	//inResIDT inStartingPane)				//in 	: LView(inPaneInfo, inViewInfo),	mCurrentIncludedPane(nil){	mPaneID = inStartingPane;}//----------------------------------------------------------------------------------------// create an IncludeView from the data in the streamC_HOST_VIEW::C_HOST_VIEW(LStream *	inStream)			//in 	: LView(inStream),	mCurrentIncludedPane(nil){//instead of having a custom pane that loads mPaneID initially,//we will just assume mPaneID is undefined.//	inStream->ReadData(&mPaneID, sizeof(ResIDT));	mPaneID = PaneIDT_Undefined;}//----------------------------------------------------------------------------------------// DestructorC_HOST_VIEW::~C_HOST_VIEW(){}//----------------------------------------------------------------------------------------// When the creation process is compelete, we need to read in the subpane we've been asked to // include initially. We do this now because everything has settled down from the creation // process and everything else is fully constructed.void	C_HOST_VIEW::FinishCreateSelf(){	if(mPaneID != PaneIDT_Undefined)LoadSubPane();}#pragma mark --subpane management--//----------------------------------------------------------------------------------------// remove the subpane from our subpane list and free it.void	C_HOST_VIEW::DisposeSubPane(){	delete mCurrentIncludedPane;		mCurrentIncludedPane = nil;	mPaneID = PaneIDT_Undefined;}//----------------------------------------------------------------------------------------// Load in a subpane from a a PPob resource, add it to our subpane list and initialize it // as if it was being read in at window creation timevoid	C_HOST_VIEW::LoadSubPane(){	LView	*defaultView = LPane::GetDefaultView();		LPane::SetDefaultView(this);	mCurrentIncludedPane = (LPane*)UReanimator::ReadObjects('PPob', mPaneID);	LPane::SetDefaultView(defaultView);	mCurrentIncludedPane->FinishCreate();}//----------------------------------------------------------------------------------------// This function is called when a pane is to be read in from a PPob resource and added as // this view's subpane.void	C_HOST_VIEW::ResetSubPane(ResIDT inPaneID, Boolean inRefresh)		//in{	if(inPaneID == mPaneID){	 	if(inRefresh)Refresh();	}else{ //inPaneID != mPaneID		if(mCurrentIncludedPane != nil)DisposeSubPane();				// Prevent List and Control Managers from automatically drawing by setting		// an empty clipping region		StClipRgnState	saveClip(nil);					mPaneID = inPaneID;		LoadSubPane();				if(inRefresh)Refresh();	}}