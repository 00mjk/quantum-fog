#pragma once#include "C_AMP_GEN.h"#include "BEAM_SPL.h"#include "TWO_MODE_FUN.h"class QB_NET;class C_PI_WIND;enum BS_TYPE{scalar_bs, vector_bs};//******************************************class  C_BEAM_SPL_AMP_GEN: public C_AMP_GEN{private:	DOUBLE	its_tau_mag;	DOUBLE	its_tau_ang;//phase angle in degrees	DOUBLE	its_rho_ang;//phase angle in degrees	USHORT	its_max_n_sum;	BS_TYPE	its_type;public:	C_BEAM_SPL_AMP_GEN(BEAM_SPL * nd_p, QB_NET * net_p, C_PI_WIND * pi_wind_p);	const DOUBLE  &  	get_tau_mag() const;	VOID   				set_tau_mag(const DOUBLE  &  mag);	const DOUBLE  & 	get_tau_ang() const;	VOID   				set_tau_ang(const DOUBLE  &  ang);	const DOUBLE  &  	get_rho_ang() const;	VOID   				set_rho_ang(const DOUBLE  &  ang);	USHORT  			get_max_n_sum() const;	VOID   				set_max_n_sum(USHORT  max);	USHORT	get_expected_degen(const USHORT * m1x_p, const USHORT * m2x_p, const USHORT * m1y_p, const USHORT * m2y_p);	BOOLEAN		parents_are_canonical();	BOOLEAN		dialog_entries_are_legal(		Str255 tau_mag_sq_pstr, Str255 tau_ang_pstr, Str255 rho_ang_pstr, Str255 max_n_sum_pstr);	VOID  	 	fill_trans_mat_and_st_names_of_nd();	BOOLEAN  	talk();};#pragma mark -//******************************************inlineconst DOUBLE  &		C_BEAM_SPL_AMP_GEN::get_tau_mag() const{	return its_tau_mag;}//******************************************inlineVOID   C_BEAM_SPL_AMP_GEN::set_tau_mag(const DOUBLE  &		mag)	//in{	its_tau_mag = mag;}//******************************************inlineconst DOUBLE  &  C_BEAM_SPL_AMP_GEN::get_tau_ang() const{	return its_tau_ang;}//******************************************inlineconst DOUBLE  &		C_BEAM_SPL_AMP_GEN::get_rho_ang() const{	return its_rho_ang;}//******************************************inlineUSHORT  C_BEAM_SPL_AMP_GEN::get_max_n_sum() const{	return its_max_n_sum;}//******************************************inlineVOID   C_BEAM_SPL_AMP_GEN::set_max_n_sum(USHORT		max)	//in{	its_max_n_sum = max;}