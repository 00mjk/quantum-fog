#pragma once#include "QFog_constants.h"//******************************************class C_CIRCLE{ public:	Point	its_center;	SInt16	its_radius; 	C_CIRCLE();			C_CIRCLE(const Point  & pt, USHORT rad);		BOOLEAN  pt_is_in(const Point  &  pt) const;	BOOLEAN  intersects_rect(const Rect  &  rect) const; };//******************************************/* An s (source) port shoots arrows. A d (destination) port is a target for arrows. An s/d ports is both an s port and a d port. It belongs to the intersectionof the set of s and d ports.What constitutes a port:(1)	its_center = the location (a Point) of the customs office,		which lies at the center of the port.(2)	If the port is a d port:	its_arriving_nds = A list of the nd_ids for all the arriving nodes. 	its_cur_s_load = the current number of arriving nodes	its_max_s_load  (2)	If the port is an s port:	its_departing_nds = A list of the nd_id's for all the departing nodes. 	its_cur_d_load = the current number of departing nodes	its_max_d_load 	(3)its_docking_rad = arrow docking radius(4)its_greeting_rad = arrow greeting radius = radius of  circle inside of which port notices ships and greets them. If port is an object of C_PORT, then 	cir = C_CIRCLE(port.its_center, port.its_docking_rad) will be referred to as a docking circle and	cir = C_CIRCLE(port.its_center, port.its_greeting_rad)will be referred to as a greeting circle.For the custom node, for example, we will assume that there is   an s/d port which can carry s and d loads of any size. For the BEAM_SPL,on the other hand, we will assume that there are two s-only ports and two d-only ports,each of which can carry a maximum load of one.*///******************************************class C_PORT_NAME{ public:	USHORT 	its_nd_id; // node id number	USHORT 	its_sub_nd_id; //numerical id distinguishing the ports of that node	C_PORT_NAME();		C_PORT_NAME(USHORT nd_id, USHORT sub_nd_id);		friend BOOLEAN  operator==(const C_PORT_NAME  & pn1, const C_PORT_NAME  & pn2);	friend BOOLEAN  operator!=(const C_PORT_NAME  & pn1, const C_PORT_NAME  & pn2);				friend LStream  & operator<<( LStream  & out_bd, const C_PORT_NAME  & pn);		friend LStream  & operator>>( LStream  & in_bd, C_PORT_NAME  &  pn);};#pragma mark -#pragma mark ----C_CIRCLE----//******************************************inlineBOOLEAN  C_CIRCLE::pt_is_in(const Point  &  pt) //inconst{	return(		sqrt(	pow(DOUBLE(pt.h - its_center.h), 2) + 				pow(DOUBLE(pt.v - its_center.v), 2) ) 		<= its_radius	);}#pragma mark ----C_PORT_NAME----//******************************************inlineBOOLEAN  operator==(const C_PORT_NAME  & pn1,	//inconst C_PORT_NAME  & pn2)	//in{ 		return( 			(pn1.its_nd_id == pn2.its_nd_id)&&		(pn1.its_sub_nd_id == pn2.its_sub_nd_id)	);}//******************************************inlineBOOLEAN  operator!=(const C_PORT_NAME  & 	pn1,	//inconst C_PORT_NAME  & 	pn2)	//in{	return !(pn1==pn2);}