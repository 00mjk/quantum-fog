#include "MY_FSTREAMS.h"#include "QFog_constants.h"//#include <unix.h>	// dpo#include 	"EXCEPTIONS.h"#ifdef   _mac_gui_app //''''''''''''''''''''''''''''''''''''''''''''\\.	#include "STRINGY.h"#endif //_mac_gui_app \\............................................//#pragma mark --ifstream--//******************************************MY_IFSTREAM::MY_IFSTREAM(){}//******************************************MY_IFSTREAM::MY_IFSTREAM(const CHAR  * name)	:IFSTREAM(name){}//******************************************MY_IFSTREAM::~MY_IFSTREAM(){}//****************************************** USHORT	MY_IFSTREAM::cur_line(){//	SHORT 		saved_state= rdstate();	clear();	LONG  		saved_pos = tellg_();	//seekg_(0, ios::beg);// dpo	seekg_(0, ios::in);	LONG  	pos=0;	USHORT 	endline_counter = 1;	CHAR  	ch;	while( pos<saved_pos){		get(ch);		if(ch==my_endline) endline_counter++;		pos++;	}// 	Restoring the read position is actually redundant since// 	the loop above takes it back to the saved position.//	seekg_(saved_pos, ios::beg); //restore position//	Restoring the state inside a catch produces a second throw, //	so we won't restore it. If the state is not good(),//  there is no point in restoring it anyway.//	istream.setstate(saved_state);//restore state	return endline_counter;}//******************************************VOID	MY_IFSTREAM::my_get(CHAR  & ch)		//out{		//BBedit always adds a \n at the end before	//saving even if you don't. CW and SimpleText don't.		//IMP: (istream >> name) will set eof()=true	//if there is no visible or invisible(like \n) character after name.		//With exceptions(failbit),	//peek() will throw if eof()=true already		//eof() first so peek() doesn't get a chance to throw	if(eof()||(peek() == EOF)){		throw END_OF_FILE();	}else{		get(ch);	}		}//******************************************VOID	MY_IFSTREAM::my_get_line(CHAR *  ch_p,		//outUSHORT	max_len,	//inCHAR	last_ch)	//in	{		if(eof()||(peek() == EOF)){		throw END_OF_FILE();	}else{		getline(ch_p, max_len, last_ch);	}		}#ifdef   _mac_gui_app //''''''''''''''''''''''''''''''''''''''''''''\\.	//******************************************VOID	MY_IFSTREAM::mac_open(const FSSpec  & fs_spec,			//in	openmode 	mode /* = in */)		//in{	//Ref. Dave Oster's Superbrain	UInt8 path[max_file_path_len];	FSRef ref;	OSStatus err = ::FSpMakeFSRef(&fs_spec, &ref);	if(err == fnfErr){		LStr255  pstr= "\pCould not find file \"" + LStr255(fs_spec.name) +"\p\".";		my_gen_alert(STRINGY(pstr));					ThrowIfOSStatus_(fnfErr);	}	ThrowIfOSStatus_(::FSRefMakePath(&ref, path, max_file_path_len));    IFSTREAM::open((char *) path, mode ) ;}#endif //_mac_gui_app \\............................................//#pragma mark --ofstream--//******************************************MY_OFSTREAM::MY_OFSTREAM(){}//******************************************MY_OFSTREAM::MY_OFSTREAM(const CHAR  * name)	:ofstream(name){}//******************************************MY_OFSTREAM::~MY_OFSTREAM(){}#ifdef   _mac_gui_app //''''''''''''''''''''''''''''''''''''''''''''\\.	//******************************************VOID	MY_OFSTREAM::mac_open(const FSSpec  & fs_spec,					//inopenmode	mode /* = out|trunc */)			//in{	//Ref. Dave Oster's Superbrain		UInt8 path[max_file_path_len];	FSRef ref;	OSStatus err = ::FSpMakeFSRef(&fs_spec, &ref);	if(err == fnfErr){		// can't make a ref to a file that doesn't exist.		ThrowIfOSStatus_(::FSpCreate(&fs_spec, 'ttxt', 'TEXT', smRoman));		err = ::FSpMakeFSRef(&fs_spec, &ref);	}	ThrowIfOSStatus_(err);	ThrowIfOSStatus_(::FSRefMakePath(&ref, path, max_file_path_len));		//open() creates files with 	//type = TEXT, creator = CWIE, as if the created by CodeWarrior.	//I want instead:	//type = TEXT, creator = ttxt, as if the created by TeachText or SimpleText.	//old way:	//The following globals are called inside open(),	//where they are used to create fs_spec of file.	//So they should be set BEFORE (preferably immediately before)	//calling open(). If you call them right after open(),	//any changes will not be seen on fs_spec of previously opened file.	//_fcreator = 'ttxt';	//_ftype = 'TEXT';		 OFSTREAM::open( (char *) path, mode ) ;	 	//new way:	//Change file's type and creator after file is created:     	FInfo	f_info;	ThrowIfOSErr_(::FSpGetFInfo(&fs_spec, &f_info) );	f_info.fdType = 'TEXT';	f_info.fdCreator = 'ttxt';	ThrowIfOSErr_(::FSpSetFInfo(&fs_spec, &f_info) );	}#endif //_mac_gui_app \\............................................//