#include "BI_NODE.h"#pragma mark --creation/destruction--//******************************************VOID	BI_NODE::set_degens(USHORT 	degen1,		//inUSHORT 	degen2)		//in{	its_num_of_rows = degen1;	its_num_of_cols = degen2;	its_cum_amps.set_to_default_mat(0, degen1, degen2);	its_cum_probs.set_to_default_mat(0, degen1, degen2);}//******************************************VOID	BI_NODE::copy(	const	BI_NODE	 &	bn)		//in{	its_nd1 = bn.its_nd1;	its_nd2 = bn.its_nd2;	its_num_of_rows = bn.its_num_of_rows;	its_num_of_cols = bn.its_num_of_cols;	its_cum_amps = bn.its_cum_amps;	its_cum_probs = bn.its_cum_probs;}//******************************************BI_NODE::BI_NODE(){}//******************************************BI_NODE::BI_NODE(USHORT		nd1,USHORT		degen1,USHORT		nd2,USHORT		degen2)	:its_nd1(nd1),	its_nd2(nd2){	set_degens(degen1, degen2);}//******************************************BI_NODE::BI_NODE(const  BI_NODE  &  bn){	copy(bn);}//******************************************BI_NODE  & 	BI_NODE::operator=(const BI_NODE  &	rhs ){	if(this != &rhs){		copy(rhs);	}	return *this;}//******************************************BI_NODE::~BI_NODE(){}#pragma mark --static info--//******************************************VOID	BI_NODE::renumber_nds(const UI_MAP  &		map)	//in{	its_nd1 = map.its_newfo[its_nd1];	its_nd2 = map.its_newfo[its_nd2];}#pragma mark --dynamic info--//******************************************VOID	BI_NODE::normalize_cum_probs(){	DOUBLE sum=0.;	USHORT row, col;	for(row=0;row<its_num_of_rows;row++){		for(col=0; col<its_num_of_cols; col++){			sum +=its_cum_probs.entry(row, col);		}	}	if(sum != 0){		for(row=0;row<its_num_of_rows;row++){			for(col=0; col<its_num_of_cols; col++){				its_cum_probs.entry(row, col) /=sum;			}		}	}}//******************************************VOID 	BI_NODE::set_cum_info_to_default(){	its_cum_probs.set_to_default_mat(0, its_num_of_rows, its_num_of_cols);	its_cum_amps.set_to_default_mat(0, its_num_of_rows, its_num_of_cols);}//******************************************VOID	BI_NODE::prepare_cum_info_for_next_ending(){	for(USHORT row=0;row<its_num_of_rows;row++){		for(USHORT col=0; col<its_num_of_cols; col++){			its_cum_probs.entry(row, col) += norm( its_cum_amps.entry(row, col) );			//norm = modulus**2 = abs**2 = real**2 + imag**2			its_cum_amps.entry(row, col) = COMPLEX(0, 0);		}	}}