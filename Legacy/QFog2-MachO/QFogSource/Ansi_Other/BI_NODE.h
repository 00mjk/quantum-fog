#pragma once#include "QFog_constants.h"#include "MATRIX.h"#include "UI_MAP.h"//******************************************class BI_NODE{private:	USHORT its_nd1, its_nd2;	USHORT its_num_of_rows;	USHORT its_num_of_cols;	//dynamic info:		MATRIX<COMPLEX>  its_cum_amps;	MATRIX<DOUBLE>   its_cum_probs;public:		VOID 	set_degens(USHORT degen1, USHORT degen2);	VOID	copy(const	BI_NODE	 &	bn);		BI_NODE();	BI_NODE(USHORT nd1, USHORT degen1, USHORT nd2, USHORT degen2);	BI_NODE(const  BI_NODE  &  bn);	BI_NODE  & operator=( const BI_NODE  & rhs );	virtual ~BI_NODE();		USHORT 	get_nd1() const;	USHORT 	get_nd2() const;		friend BOOLEAN  operator==(		const BI_NODE  &	bi_x,		const BI_NODE  &	bi_y);	friend BOOLEAN  operator!=(		const BI_NODE  &	bi_x,		const BI_NODE  &	bi_y);	BOOLEAN 	has(USHORT nd) const;	BOOLEAN 	has(USHORT nd1, USHORT nd2) const;		VOID		renumber_nds(const UI_MAP  &  map);	const DOUBLE  &		get_cum_prob(USHORT row, USHORT col) const;	VOID 	normalize_cum_probs();	VOID 	set_cum_info_to_default();	VOID 	add_to_an_entry_of_cum_amps(		USHORT row,		USHORT col,		const COMPLEX  & net_amp);	VOID 	prepare_cum_info_for_next_ending();	};#pragma mark -//******************************************inlineUSHORT 	BI_NODE::get_nd1() const {	return 	its_nd1;}//******************************************inlineUSHORT 	BI_NODE::get_nd2() const {	return 	its_nd2;}//******************************************inlineBOOLEAN  operator==(const BI_NODE  &  	bi_x,		//inconst BI_NODE  &  	bi_y)		//in{ 		return(		(bi_x.its_nd1==bi_y.its_nd1 && bi_x.its_nd2==bi_y.its_nd2)||		(bi_x.its_nd1==bi_y.its_nd2 && bi_x.its_nd2==bi_y.its_nd1) 	);}//******************************************inlineBOOLEAN  operator!=(const BI_NODE  &	bi_x,	//inconst BI_NODE  &	bi_y)	//in{	return !(bi_x==bi_y);}//******************************************inlineBOOLEAN		BI_NODE::has(USHORT	nd)		//inconst{ 		return (its_nd1==nd||its_nd2==nd);}//******************************************inlineBOOLEAN		BI_NODE::has(USHORT 	nd1,	//inUSHORT 	nd2)	//inconst	{ 		return		(its_nd1==nd1 && its_nd2==nd2)||		(its_nd1==nd2 && its_nd2==nd1) 	;}//******************************************inlineconst DOUBLE  &		BI_NODE::get_cum_prob(USHORT		row,	//inUSHORT		col)	//inconst{	return its_cum_probs.entry(row, col);}//******************************************inlineVOID 	BI_NODE::add_to_an_entry_of_cum_amps(USHORT 		row,				//inUSHORT 		col,				//inconst COMPLEX  & 	net_amp)	//in{	its_cum_amps.entry(row, col) += net_amp;}