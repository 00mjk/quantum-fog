//******************************************// Purpose: To define a class that // orders a collection of stringies alpahbetically. Also, // given any stringy, it tells what is its dictionary position.//******************************************#pragma once#include "STRINGY.h"#include "VECTOR.h"#include "UI_MAP.h"//#include <stdlib.h>//#include <stdio.h>//******************************************class DICTIONARY{private:	// stringies ordered so ids are listed in increasing order	const STRINGY  *  *	its_stringies_p_p;	 	VECTOR<STRINGY>	 * 	its_stringies_p;		USHORT 				its_num_of_stringies;	USHORT				its_num_of_users;	// ID's ordered so stringies are listed alphabetically	USHORT  * 			its_ids_p;			VOID sort_vec_of_ids_by_abc();public://	VOID sort_vec_of_ids_by_abc();	DICTIONARY( const STRINGY  *  *   stringies_p_p, USHORT len);	DICTIONARY( VECTOR<STRINGY>  *   stringies_p);	virtual ~DICTIONARY();		const STRINGY  & 	get_stringy(USHORT id) const;	USHORT  get_id_of_this_stringy(const STRINGY  & stringy) const;	VOID	get_map(UI_MAP	 &  map) const;	USHORT	get_num_of_stringies() const;		USHORT	get_num_of_users() const;	VOID	add_one_user();	VOID	del_one_user();};#pragma mark -//******************************************inlineUSHORT		DICTIONARY::get_num_of_stringies()const{	return	its_num_of_stringies;}//******************************************inlineUSHORT		DICTIONARY::get_num_of_users()const{	return	its_num_of_users;}//******************************************inlineVOID		DICTIONARY::add_one_user(){	its_num_of_users++;}//******************************************inlineVOID		DICTIONARY::del_one_user(){	its_num_of_users--;}	