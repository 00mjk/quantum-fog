#include  	"UI_MAP.h"#include 	"STRINGY.h"#include 	"DICTIONARY.h"//******************************************UI_MAP::UI_MAP(){}//******************************************VOID	UI_MAP::set_to_default_map(USHORT	len)	//in{	//default is the identity map of Dimension = len.	its_newfo.set_to_default_vec(0, len);	its_oldfn.set_to_default_vec(0, len);	for(USHORT	i=0; i<len; i++){		its_oldfn[i] = i;		its_newfo[i] = i;	}}//******************************************UI_MAP::UI_MAP(USHORT	len)	//in{	set_to_default_map(len);}//******************************************UI_MAP::~UI_MAP(){}//******************************************VOID	UI_MAP::set_newfo(){	for(USHORT	i = 0; i<its_oldfn.get_len(); i++){		its_newfo[its_oldfn[i]] = i;	}}//******************************************VOID	UI_MAP::set_oldfn(){	for(USHORT	i = 0; i<its_newfo.get_len(); i++){		its_oldfn[its_newfo[i]] = i;	}}//******************************************BOOLEAN	UI_MAP::is_identity_map() const{	for(USHORT	i = 0; i<its_newfo.get_len(); i++){		if(its_newfo[i] != i)return false;	}	return true;}//******************************************VOID 	 UI_MAP::get_inverse(UI_MAP  &	inv)	//i-o{	inv.set_to_default_map(its_newfo.get_len());	inv.its_newfo = its_oldfn;	inv.its_oldfn = its_newfo;}#pragma mark --sorting functions--//******************************************VOID	 UI_MAP::sort_vec_of_stringies_by_name(const STRINGY   *  *		stringies_p_p,		//inUSHORT						len)				//in{	//stringies_p_p must of size len			DICTIONARY	 *  dict_p = new DICTIONARY(stringies_p_p, len);	//delete: in this method	ThrowIfNil_(dict_p);	set_to_default_map(len);	dict_p->get_map(*this);		delete dict_p;	dict_p=0;}//******************************************VOID	 UI_MAP::sort_vec_of_longs_by_size(const LONG   *		items_p,			//inUSHORT					len)			//in{	//items_p must of size len	//initially, map = the identity map	  	set_to_default_map(len);	//Ascending indirect shell sort.//Comes from page 235 of Practical Algorithms in C++ by Flamig.	USHORT	old_i;  	USHORT  i, j, h;  	for (h = len; h > 1;) {    		if(h<5){   			h= 1;   		}else{   			h = (5*h-1)/11;   		}		// Perform insertion sort with increment h		for(i = h; i < len; i++) {			old_i = its_oldfn[i]; 	 		j = i;  			while(j >= h && items_p[old_i] < items_p[its_oldfn[j-h]] ) {    			its_oldfn[j] = its_oldfn[j-h];    			j = j-h;  			}  			its_oldfn[j] = old_i;    	}    }  	set_newfo();}