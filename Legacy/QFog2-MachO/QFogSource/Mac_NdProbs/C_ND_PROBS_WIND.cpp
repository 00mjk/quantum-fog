#include "C_ND_PROBS_WIND.h"#include "C_MAIN_VIEW.h"#include "C_ND_PROBS_TABLE.h"#include "QB_NET.h"#include "EXCEPTIONS.h"#pragma mark --creation/destruction--//******************************************C_ND_PROBS_WIND::C_ND_PROBS_WIND(LStream  *		inStream)	//in	:LWindow(inStream),	its_nd(0){}//******************************************C_ND_PROBS_WIND::C_ND_PROBS_WIND()	:its_nd(0){}//******************************************C_ND_PROBS_WIND::~C_ND_PROBS_WIND(){	its_mview_p->finish_nd_probs_wind_closing();}//******************************************VOID	C_ND_PROBS_WIND::init_popup(){	MenuHandle		menu_h = its_popup_p->GetMacMenuH();	//destroy_h: by PP	ThrowIfNil_(menu_h);			// dummy item must be cleared	SInt16  num_of_items = ::CountMenuItems(menu_h);	for(SInt16 menu_item =1; menu_item<= num_of_items; menu_item++){		::DeleteMenuItem(menu_h, 1);	}		NODE  *   nd_p;	for(USHORT nd=0; nd < its_net_p->get_num_of_nds(); nd++){		nd_p = its_net_p->get_nd_ptr(nd); 	      	// Add the item      	// Insert a dummy item, then rename it so special chars are not a problem		::AppendMenu(menu_h, "\pdummy");		LStr255 descriptor_pstr;		nd_p->get_name().fill_LStr255(descriptor_pstr);		if(descriptor_pstr[0]!=0)::SetMenuItemText( menu_h, nd+1 , descriptor_pstr );	}	its_popup_p->SetMinValue(1);   	its_popup_p->SetMaxValue(its_net_p->get_num_of_nds());	its_popup_p->StopBroadcasting();			its_popup_p->SetValue(1);	its_popup_p->StartBroadcasting();}//******************************************VOID	C_ND_PROBS_WIND::show_owner(const LStr255  &  file_name)		//in{	LStr255  cap = "\pProject: ";	cap += (LStr255)file_name;	its_owner_cap_p->SetDescriptor(cap);}//******************************************VOID	C_ND_PROBS_WIND::special_finish_create(const LStr255  & 	file_name,		//inUSHORT sel_nd)						//in{	its_owner_cap_p =(LCaption  *)FindPaneByID(nd_probs_owner_cap_rid);	its_info_cap_p = (LCaption  *)FindPaneByID(nd_probs_info_cap_rid);	its_popup_p = (LPopupButton  *)FindPaneByID(nd_probs_popup_rid);	its_first_but_p =(LStdButton  *)FindPaneByID(nd_probs_first_but_rid);	its_next_but_p =(LStdButton  *)FindPaneByID(nd_probs_next_but_rid);	its_table_p = (C_ND_PROBS_TABLE  *)FindPaneByID(nd_probs_table_rid); 	// Activate RidL resource.   	UReanimator::LinkListenerToControls(this, this, nd_probs_wind_ridl);	//its SuperCommander is defined in C_MAIN_VIEW::create_nd_probs_wind() 	((C_MAIN_VIEW  *)GetSuperCommander())->get_top_ptrs(its_doc_p, its_mview_p, its_net_p);  	// sub-pane initializations  that do not depend on sel_nd 	show_owner(file_name); 	 	init_popup(); 	 		 	 			 	 		its_table_p->set_top_ptrs(its_doc_p, its_mview_p, its_net_p); 	 	// initializations that depend on sel_nd	set_nd_always(sel_nd);	 	Show();//necessary! 	  	}#pragma mark --focus node--//******************************************VOID 	C_ND_PROBS_WIND::refresh_info_cap(){	NODE  *    	nd_p = its_net_p->get_nd_ptr(its_nd);	USHORT		degen = nd_p->get_degen();	DOUBLE  	prob = 0;	DOUBLE		info = 0;	for(USHORT	j=0; j<degen; j++){		prob = nd_p->get_cum_prob(j);		if(prob>probs_floor) info -= prob*log(prob)/nat_log_of_2;	}	LStr255	str;	str.Assign(info, FIXEDDECIMAL, 6);	its_info_cap_p->SetDescriptor(str);}//******************************************VOID	C_ND_PROBS_WIND::set_nd_always(USHORT  	new_nd)			//in{	its_nd =new_nd;		its_popup_p->StopBroadcasting();	its_popup_p->SetValue(new_nd + 1);	its_popup_p->StartBroadcasting();	refresh_info_cap();		its_table_p->set_nd_always(new_nd);		}#pragma mark --buttons:	response center--//******************************************VOID	C_ND_PROBS_WIND::ListenToMessage(MessageT  	inMessage,		//inVOID  * 	ioParam )		//i-o{	//MONITOR_THE_CHANGE_HERE		USHORT		new_item_num;	USHORT		num_of_items = its_net_p->get_num_of_nds();		switch ( inMessage ) {		case msg_nd_probs_popup:			// for nd_popup: inMessage = pane id, *ioParam = current item			new_item_num = *((SInt32  *)ioParam); 					set_nd_if_diff(new_item_num - 1);			break;		case msg_nd_probs_first_but:			set_nd_if_diff(0);					break;		case msg_nd_probs_next_but:			if(its_nd + 1 <num_of_items){				set_nd_if_diff(its_nd + 1);			}else{				::SysBeep(0);			}			break;	}}